/*
 *  Copyright 2012 Hippo.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.hippoecm.repository.standardworkflow;

import java.io.Serializable;
import java.rmi.RemoteException;
import java.util.Arrays;
import java.util.Collections;
import java.util.Map;

import javax.jcr.Node;
import javax.jcr.RepositoryException;
import javax.jcr.Session;

import org.hippoecm.repository.api.Document;
import org.hippoecm.repository.api.HippoNodeType;
import org.hippoecm.repository.api.WorkflowException;
import org.hippoecm.repository.ext.InternalWorkflow;
import org.onehippo.cms7.services.HippoServiceRegistry;
import org.onehippo.cms7.services.eventbus.HippoEventBus;
import org.onehippo.repository.events.HippoWorkflowEvent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * {@link WorkflowEventLoggerWorkflow} implementation that posts workflow events to the {@link HippoEventBus}.
 */
public class WorkflowEventLoggerWorkflowImpl implements WorkflowEventLoggerWorkflow, InternalWorkflow {

    private static final Logger log = LoggerFactory.getLogger(WorkflowEventLoggerWorkflowImpl.class);

    private Session session;

    public WorkflowEventLoggerWorkflowImpl(Session session) throws RepositoryException, WorkflowException {
        this.session = session;
    }

    public WorkflowEventLoggerWorkflowImpl(Session userSession, Session rootSession, Node subject) throws RepositoryException, WorkflowException {
        this(rootSession);
    }

    @Override
    public Map<String, Serializable> hints() throws WorkflowException, RemoteException, RepositoryException {
        return Collections.emptyMap();
    }

    @Override
    public void logEvent(final String who, final String className, final String methodName) throws RemoteException {
        logWorkflowStep(who, className, methodName, null, null, null);
    }

    @Override
    public void logWorkflowStep(String userName, String className, String methodName, Object[] args, Object returnObject, String documentPath) {
        if (className != null && className.equals(WorkflowEventLoggerWorkflowImpl.class.getName())) {
            if (log.isDebugEnabled()) {
                log.debug("We don't log the event generated by our own invocation");
            }
            return;
        }

        String returnType = getReturnType(returnObject);
        String returnValue = getReturnValue(returnObject);
        String[] arguments = replaceObjectsWithStrings(args);
        String handleUuid = getHandleUuid(documentPath);
        postEvent(userName, className, methodName, documentPath, handleUuid, returnType, returnValue, arguments);
    }

    private String getHandleUuid(final String documentPath) {
        if (documentPath == null) {
            return null;
        }
        final int idx = documentPath.lastIndexOf("/");
        if (idx > 0) {
            final String handlePath = documentPath.substring(0, idx);
            try {
                final Node node = session.getNode(handlePath);
                if (node.isNodeType(HippoNodeType.NT_HANDLE)) {
                    return node.getIdentifier();
                }
            } catch (RepositoryException e) {
                log.error("Failed to determine uuid of document handle at " + handlePath + " while logging workflow event", e);
            }
        }
        return null;
    }


    private void postEvent(String who, String className, String methodName, String documentPath, String handleUuid, String returnType, String returnValue, String[] arguments) {
        HippoEventBus eventBus = HippoServiceRegistry.getService(HippoEventBus.class);
        if (eventBus != null) {
            HippoWorkflowEvent event = new HippoWorkflowEvent();
            event.user(who).action(className + "." + methodName).result(returnValue);
            event.className(className).methodName(methodName).handleUuid(handleUuid);
            event.returnType(returnType).returnValue(returnValue).documentPath(documentPath);
            if (arguments != null) {
                event.arguments(Arrays.asList(arguments));
            }
            eventBus.post(event);
        }
    }

    private String getReturnValue(Object returnObject) {
        if (returnObject == null) {
            return null;
        }
        if (returnObject instanceof Document) {
            Document document = (Document) returnObject;
            StringBuilder sb = new StringBuilder();
            sb.append("document[uuid=");
            sb.append(document.getIdentity());
            if (document.getIdentity() != null) {
                sb.append(",path='");
                try {
                    sb.append(session.getNodeByIdentifier(document.getIdentity()).getPath());
                } catch (RepositoryException e) {
                    sb.append("error:").append(e.getMessage());
                }
            }
            sb.append("']");
            return sb.toString();
        } else {
            return returnObject.toString();
        }
    }

    private static String getReturnType(Object returnObject) {
        if (returnObject == null) {
            return null;
        }
        if (returnObject instanceof Document) {
            return "document";
        } else {
            return returnObject.getClass().getName();
        }
    }

    private static String[] replaceObjectsWithStrings(Object[] args) {
        if (args == null) {
            return null;
        }
        String[] arguments = new String[args.length];
        for (int i = 0; i < args.length; i++) {
            if (args[i] != null) {
                arguments[i] = args[i].toString();
            } else {
                arguments[i] = "<null>";
            }
        }
        return arguments;
    }

}
