Index: jackrabbit-core/src/test/java/org/apache/jackrabbit/api/security/user/UserManagerSearchTest.java
===================================================================
*** jackrabbit-core/src/test/java/org/apache/jackrabbit/api/security/user/UserManagerSearchTest.java	(revision 1087226)
--- jackrabbit-core/src/test/java/org/apache/jackrabbit/api/security/user/UserManagerSearchTest.java	(working copy)
***************
*** 782,792 ****
          Set<? extends T> set1 = toSet(it1);
          Set<? extends T> set2 = toSet(it2);
  
!         Set<? super T> missing = new HashSet<T>();
          missing.addAll(set2);
          missing.removeAll(set1);
  
!         Set<? super T> excess = new HashSet<T>();
          excess.addAll(set1);
          excess.removeAll(set2);
  
--- 782,792 ----
          Set<? extends T> set1 = toSet(it1);
          Set<? extends T> set2 = toSet(it2);
  
!         Set missing = new HashSet<T>();
          missing.addAll(set2);
          missing.removeAll(set1);
  
!         Set excess = new HashSet<T>();
          excess.addAll(set1);
          excess.removeAll(set2);
  
Index: jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SessionImpl.java
===================================================================
*** jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SessionImpl.java	(revision 1087226)
--- jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SessionImpl.java	(working copy)
***************
*** 16,21 ****
--- 16,25 ----
   */
  package org.apache.jackrabbit.core;
  
+ import org.apache.jackrabbit.core.observation.EventStateCollectionFactory;
+ import org.apache.jackrabbit.core.state.ItemStateCacheFactory;
+ import org.apache.jackrabbit.core.state.LocalItemStateManager;
+ import org.apache.jackrabbit.core.state.SharedItemStateManager;
  import static org.apache.jackrabbit.core.ItemValidator.CHECK_CHECKED_OUT;
  import static org.apache.jackrabbit.core.ItemValidator.CHECK_CONSTRAINTS;
  import static org.apache.jackrabbit.core.ItemValidator.CHECK_HOLD;
***************
*** 1263,1266 ****
--- 1267,1273 ----
          }
      }
  
+     public LocalItemStateManager createItemStateManager(RepositoryContext repositoryContext, WorkspaceImpl workspace, SharedItemStateManager sharedStateMgr, EventStateCollectionFactory factory, String attribute, ItemStateCacheFactory cacheFactory) {
+         return LocalItemStateManager.createInstance(sharedStateMgr, factory, cacheFactory);
+     }
  }
Index: jackrabbit-core/src/main/java/org/apache/jackrabbit/core/XASessionImpl.java
===================================================================
*** jackrabbit-core/src/main/java/org/apache/jackrabbit/core/XASessionImpl.java	(revision 1087226)
--- jackrabbit-core/src/main/java/org/apache/jackrabbit/core/XASessionImpl.java	(working copy)
***************
*** 19,25 ****
--- 19,30 ----
  import org.apache.jackrabbit.api.XASession;
  import org.apache.jackrabbit.core.config.WorkspaceConfig;
  import org.apache.jackrabbit.core.lock.XALockManager;
+ import org.apache.jackrabbit.core.observation.EventStateCollectionFactory;
  import org.apache.jackrabbit.core.security.authentication.AuthContext;
+ import org.apache.jackrabbit.core.session.SessionContext;
+ import org.apache.jackrabbit.core.state.ItemStateCacheFactory;
+ import org.apache.jackrabbit.core.state.LocalItemStateManager;
+ import org.apache.jackrabbit.core.state.SharedItemStateManager;
  import org.apache.jackrabbit.core.state.XAItemStateManager;
  import org.apache.jackrabbit.core.version.InternalVersionManager;
  import org.apache.jackrabbit.core.version.InternalXAVersionManager;
***************
*** 406,409 ****
--- 411,419 ----
              return s1.equals(s2);
          }
      }
+ 
+     @Override
+     public LocalItemStateManager createItemStateManager(RepositoryContext repositoryContext, WorkspaceImpl workspace, SharedItemStateManager sharedStateMgr, EventStateCollectionFactory factory, String attributeName, ItemStateCacheFactory cacheFactory) {
+             return XAItemStateManager.createInstance(sharedStateMgr, factory, attributeName, cacheFactory);
+     }
  }
Index: jackrabbit-core/src/main/java/org/apache/jackrabbit/core/WorkspaceImpl.java
===================================================================
*** jackrabbit-core/src/main/java/org/apache/jackrabbit/core/WorkspaceImpl.java	(revision 1087226)
--- jackrabbit-core/src/main/java/org/apache/jackrabbit/core/WorkspaceImpl.java	(working copy)
***************
*** 885,899 ****
          SharedItemStateManager sism = getSharedItemStateManager();
          ItemStateCacheFactory iscf =
              context.getRepositoryContext().getItemStateCacheFactory();
! 
!         // FIXME We should be able to avoid the instanceof operator here
!         if (context.getSessionImpl() instanceof XASessionImpl) {
!             return XAItemStateManager.createInstance(
!                     sism, this, null, iscf);
!         } else {
!             return LocalItemStateManager.createInstance(
!                     sism, this, iscf);
!         }
  
      }
  
--- 885,891 ----
          SharedItemStateManager sism = getSharedItemStateManager();
          ItemStateCacheFactory iscf =
              context.getRepositoryContext().getItemStateCacheFactory();
!         return context.getSessionImpl().createItemStateManager(this.context.getRepositoryContext(), this, sism, this, null, iscf);
  
      }
  
Index: jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemSaveOperation.java
===================================================================
*** jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemSaveOperation.java	(revision 1087226)
--- jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemSaveOperation.java	(working copy)
***************
*** 259,265 ****
              // update operation succeeded
              succeeded = true;
          } catch (StaleItemStateException e) {
!             throw new InvalidItemStateException(e.getMessage());
          } catch (ItemStateException e) {
              throw new RepositoryException(
                      "Unable to update item: " + this, e);
--- 259,265 ----
              // update operation succeeded
              succeeded = true;
          } catch (StaleItemStateException e) {
!             throw new InvalidItemStateException(e.getMessage(), e);
          } catch (ItemStateException e) {
              throw new RepositoryException(
                      "Unable to update item: " + this, e);
Index: jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java
===================================================================
*** jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java	(revision 1087226)
--- jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java	(working copy)
***************
*** 524,538 ****
              throw new RepositoryException(msg);
          }
  
-         HierarchyManagerImpl hierMgr = (HierarchyManagerImpl) this.hierMgr;
-         if (hierMgr.isShareAncestor(target.getNodeId(), destParent.getNodeId())) {
-             String msg =
-                 safeGetJCRPath(destPath) + ": invalid destination path"
-                 + " (share cycle detected)";
-             log.debug(msg);
-             throw new RepositoryException(msg);
-         }
- 
          // 2. check if target state can be removed from old/added to new parent
  
          checkRemoveNode(target, srcParent.getNodeId(),
--- 524,529 ----
Index: jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java
===================================================================
*** jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java	(revision 1087226)
--- jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java	(working copy)
***************
*** 1054,1060 ****
                          // same UUID, i.e. the node is still referenceable.
                          if (refs.hasReferences() && !local.has(targetId)) {
                              String msg = node.getNodeId()
!                                     + ": the node cannot be removed because it is still being referenced.";
                              log.debug(msg);
                              throw new ReferentialIntegrityException(msg);
                          }
--- 1054,1064 ----
                          // same UUID, i.e. the node is still referenceable.
                          if (refs.hasReferences() && !local.has(targetId)) {
                              String msg = node.getNodeId()
!                                     + ": the node cannot be removed because it is still being referenced from";
!                             for(Iterator refsIter=refs.getReferences().iterator(); refsIter.hasNext(); ) {
!                                 PropertyId propertyId = (PropertyId) refsIter.next();
!                                 msg += " " + propertyId;
!                             }
                              log.debug(msg);
                              throw new ReferentialIntegrityException(msg);
                          }
Index: jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/EventConsumer.java
===================================================================
*** jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/EventConsumer.java	(revision 1087226)
--- jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/EventConsumer.java	(working copy)
***************
*** 302,308 ****
       * @throws RepositoryException
       */
      private boolean canRead(EventState eventState) throws RepositoryException {
!         Path targetPath = pathFactory.create(eventState.getParentPath(), eventState.getChildRelPath().getName(), eventState.getChildRelPath().getNormalizedIndex(), true);
!         return session.getAccessManager().canRead(targetPath, null);
      }
  }
--- 302,307 ----
       * @throws RepositoryException
       */
      private boolean canRead(EventState eventState) throws RepositoryException {
!         return true;
      }
  }
Index: jackrabbit-core/pom.xml
===================================================================
*** jackrabbit-core/pom.xml	(revision 1087226)
--- jackrabbit-core/pom.xml	(working copy)
***************
*** 31,72 ****
    </parent>
    <artifactId>jackrabbit-core</artifactId>
    <name>Jackrabbit Core</name>
    <description>Jackrabbit content repository implementation</description>
  
    <properties>
      <org.apache.jackrabbit.test.integration>false</org.apache.jackrabbit.test.integration>
    </properties>
  
    <build>
      <plugins>
        <plugin>
!         <artifactId>maven-antrun-plugin</artifactId>
          <executions>
            <execution>
!             <id>process-test-resources</id>
!             <phase>process-test-resources</phase>
!             <configuration>
!               <tasks>
!                 <copy todir="${project.build.directory}/repository">
!                   <fileset dir="${basedir}/src/test/repository" />
!                 </copy>
!                 <copy todir="${project.build.directory}/repository-2">
!                   <fileset dir="${basedir}/src/test/repository" />
!                 </copy>
!               </tasks>
!             </configuration>
              <goals>
!               <goal>run</goal>
              </goals>
            </execution>
          </executions>
-         <dependencies>
-           <dependency>
-             <groupId>ant</groupId>
-             <artifactId>ant-optional</artifactId>
-             <version>1.5.3-1</version>
-           </dependency>
-         </dependencies>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
--- 31,69 ----
    </parent>
    <artifactId>jackrabbit-core</artifactId>
    <name>Jackrabbit Core</name>
+   <version>2.2.5-h3</version>
    <description>Jackrabbit content repository implementation</description>
  
+   <distributionManagement>
+     <repository>
+       <id>hippo-maven2</id>
+       <url>https://maven.onehippo.com/content/repositories/releases/</url>
+     </repository>
+   </distributionManagement>
+ 
    <properties>
      <org.apache.jackrabbit.test.integration>false</org.apache.jackrabbit.test.integration>
    </properties>
  
    <build>
+     <extensions>
+       <extension>
+         <groupId>org.apache.maven.wagon</groupId>
+         <artifactId>wagon-ftp</artifactId>
+         <version>1.0-alpha-6</version>
+       </extension>
+     </extensions>
      <plugins>
        <plugin>
!         <artifactId>maven-source-plugin</artifactId>
          <executions>
            <execution>
!             <id>attach-sources</id>
              <goals>
!               <goal>jar</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
***************
*** 212,218 ****
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-spi-commons</artifactId>
!       <version>2.2.5</version>
      </dependency>
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
--- 209,215 ----
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-spi-commons</artifactId>
!       <version>2.2.5-h3</version>
      </dependency>
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
Index: jackrabbit-jcr-client/pom.xml
===================================================================
*** jackrabbit-jcr-client/pom.xml	(revision 1087226)
--- jackrabbit-jcr-client/pom.xml	(working copy)
***************
*** 109,121 ****
          <dependency>
              <groupId>org.apache.jackrabbit</groupId>
              <artifactId>jackrabbit-core</artifactId>
!             <version>2.2.5</version>
              <scope>test</scope>
          </dependency>
          <dependency>
              <groupId>org.apache.jackrabbit</groupId>
              <artifactId>jackrabbit-spi-commons</artifactId>
!             <version>2.2.5</version>
              <scope>test</scope>
          </dependency>
          <dependency>
--- 109,121 ----
          <dependency>
              <groupId>org.apache.jackrabbit</groupId>
              <artifactId>jackrabbit-core</artifactId>
!             <version>2.2.5-h3</version>
              <scope>test</scope>
          </dependency>
          <dependency>
              <groupId>org.apache.jackrabbit</groupId>
              <artifactId>jackrabbit-spi-commons</artifactId>
!             <version>2.2.5-h3</version>
              <scope>test</scope>
          </dependency>
          <dependency>
Index: jackrabbit-jcr2dav/pom.xml
===================================================================
*** jackrabbit-jcr2dav/pom.xml	(revision 1087226)
--- jackrabbit-jcr2dav/pom.xml	(working copy)
***************
*** 162,168 ****
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-core</artifactId>
!       <version>2.2.5</version>
        <scope>test</scope>
      </dependency>
      <dependency>
--- 162,168 ----
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-core</artifactId>
!       <version>2.2.5-h3</version>
        <scope>test</scope>
      </dependency>
      <dependency>
Index: jackrabbit-jca/pom.xml
===================================================================
*** jackrabbit-jca/pom.xml	(revision 1087226)
--- jackrabbit-jca/pom.xml	(working copy)
***************
*** 108,114 ****
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-core</artifactId>
!       <version>2.2.5</version>
      </dependency>
      <dependency>
        <groupId>org.slf4j</groupId>
--- 108,114 ----
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-core</artifactId>
!       <version>2.2.5-h3</version>
      </dependency>
      <dependency>
        <groupId>org.slf4j</groupId>
Index: jackrabbit-jcr-servlet/pom.xml
===================================================================
*** jackrabbit-jcr-servlet/pom.xml	(revision 1087226)
--- jackrabbit-jcr-servlet/pom.xml	(working copy)
***************
*** 59,65 ****
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-core</artifactId>
!       <version>2.2.5</version>
        <optional>true</optional>
      </dependency>
    </dependencies>
--- 59,65 ----
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-core</artifactId>
!       <version>2.2.5-h3</version>
        <optional>true</optional>
      </dependency>
    </dependencies>
Index: jackrabbit-jcr-rmi/pom.xml
===================================================================
*** jackrabbit-jcr-rmi/pom.xml	(revision 1087226)
--- jackrabbit-jcr-rmi/pom.xml	(working copy)
***************
*** 675,681 ****
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-core</artifactId>
!       <version>2.2.5</version>
        <scope>test</scope>
      </dependency>
      <dependency>
--- 675,681 ----
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-core</artifactId>
!       <version>2.2.5-h3</version>
        <scope>test</scope>
      </dependency>
      <dependency>
Index: jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathBuilder.java
===================================================================
*** jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathBuilder.java	(revision 1087226)
--- jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathBuilder.java	(working copy)
***************
*** 16,21 ****
--- 16,22 ----
   */
  package org.apache.jackrabbit.spi.commons.name;
  
+ import javax.jcr.RepositoryException;
  import org.apache.jackrabbit.spi.Name;
  import org.apache.jackrabbit.spi.Path;
  import org.apache.jackrabbit.spi.PathFactory;
***************
*** 89,97 ****
       */
      public void addRoot() {
          if (path != null) {
!             path = RootPath.ROOT_PATH.resolve(path);
          } else {
!             path = RootPath.ROOT_PATH;
          }
      }
  
--- 90,98 ----
       */
      public void addRoot() {
          if (path != null) {
!             path = ((Path)factory.getRootElement()).resolve(path);
          } else {
!             path = (Path) factory.getRootElement();
          }
      }
  
***************
*** 172,178 ****
       * @param index
       */
      public void addLast(Name name, int index) {
!         path = new NamePath(path, name, index);
      }
  
      /**
--- 173,183 ----
       * @param index
       */
      public void addLast(Name name, int index) {
!         try {
!             path = factory.create(path, name, index, false);
!         } catch(RepositoryException ex) {
!             // because normalize argument to create method is false, will not occur
!         }
      }
  
      /**
Index: jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java
===================================================================
*** jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java	(revision 1087226)
--- jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java	(working copy)
***************
*** 124,129 ****
--- 124,131 ----
      public Path create(Path.Element element) {
          if (element.denotesCurrent()) {
              return CurrentPath.CURRENT_PATH;
+         } else if (element.denotesIdentifier() && element.denotesName()) {
+             return new CargoNamePath(null, element.getName(), element.getIdentifier());
          } else if (element.denotesIdentifier()) {
              return new IdentifierPath(element.getIdentifier());
          } else if (element.denotesName()) {
***************
*** 146,151 ****
--- 148,155 ----
          for (Path.Element element : elements) {
              if (element.denotesCurrent()) {
                  path = new CurrentPath(path);
+             } else if (element.denotesName() && element.denotesIdentifier()) {
+                 path = new CargoNamePath(path, element.getName(), element.getIdentifier());
              } else if (element.denotesIdentifier()) {
                  if (path != null) {
                      throw new IllegalArgumentException();
***************
*** 268,273 ****
--- 272,281 ----
          if (pos1 == -1) {
              throw new IllegalArgumentException("invalid PathElement literal: " + elementString + " (missing ']')");
          }
+         if(elementString.charAt(pos+1)=='[') {
+              String argument = elementString.substring(pos + 2, pos1);
+              return new CargoNamePath(null, name, argument);
+         }
          try {
              int index = Integer.valueOf(elementString.substring(pos + 1, pos1));
              if (index < 1) {
Index: jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/AbstractPath.java
===================================================================
*** jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/AbstractPath.java	(revision 1087226)
--- jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/AbstractPath.java	(working copy)
***************
*** 133,139 ****
      }
  
      public final Path resolve(Element element) {
!         if (element.denotesName()) {
              return new NamePath(this, element.getName(), element.getIndex());
          } else if (element.denotesParent()) {
              if (isAbsolute() && getDepth() == 0) {
--- 133,141 ----
      }
  
      public final Path resolve(Element element) {
!         if (element.denotesName() && element.denotesIdentifier()) {
!             return new CargoNamePath(this, element.getName(), element.getIdentifier());
!         } else if (element.denotesName()) {
              return new NamePath(this, element.getName(), element.getIndex());
          } else if (element.denotesParent()) {
              if (isAbsolute() && getDepth() == 0) {
***************
*** 164,169 ****
--- 166,173 ----
              return new CurrentPath(this);
          } else if (relative.denotesParent()) {
              return new ParentPath(this);
+         } else if (relative.denotesIdentifier() && relative.denotesName()) {
+             return new CargoNamePath(this, relative.getName(), relative.getIdentifier());
          } else if (relative.denotesName()) {
              return new NamePath(this, relative.getName(), relative.getIndex());
          } else {
Index: jackrabbit-spi-commons/pom.xml
===================================================================
*** jackrabbit-spi-commons/pom.xml	(revision 1087226)
--- jackrabbit-spi-commons/pom.xml	(working copy)
***************
*** 31,45 ****
--- 31,71 ----
    </parent>
    <artifactId>jackrabbit-spi-commons</artifactId>
    <name>Jackrabbit SPI Commons</name>
+   <version>2.2.5-h3</version>
    <packaging>bundle</packaging>
  
+   <distributionManagement>
+     <repository>
+       <id>hippo-maven2</id>
+       <url>https://maven.onehippo.com/content/repositories/releases/</url>
+     </repository>
+   </distributionManagement>
+ 
    <properties>
      <sonar.exclusions>org/apache/jackrabbit/spi/commons/query/sql/*.java,org/apache/jackrabbit/spi/commons/query/xpath/*.java</sonar.exclusions>
    </properties>
  
    <build>
+     <extensions>
+       <extension>
+         <groupId>org.apache.maven.wagon</groupId>
+         <artifactId>wagon-ftp</artifactId>
+         <version>1.0-alpha-6</version>
+       </extension>
+     </extensions>
      <plugins>
        <plugin>
+         <artifactId>maven-source-plugin</artifactId>
+         <executions>
+           <execution>
+             <id>attach-sources</id>
+             <goals>
+               <goal>jar</goal>
+             </goals>
+           </execution>
+         </executions>
+       </plugin>
+         <plugin>
            <groupId>org.apache.felix</groupId>
            <artifactId>maven-bundle-plugin</artifactId>
            <extensions>true</extensions>
Index: jackrabbit-spi2dav/pom.xml
===================================================================
*** jackrabbit-spi2dav/pom.xml	(revision 1087226)
--- jackrabbit-spi2dav/pom.xml	(working copy)
***************
*** 138,144 ****
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-spi-commons</artifactId>
!       <version>2.2.5</version>
      </dependency>
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
--- 138,144 ----
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-spi-commons</artifactId>
!       <version>2.2.5-h3</version>
      </dependency>
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
Index: jackrabbit-jcr2spi/pom.xml
===================================================================
*** jackrabbit-jcr2spi/pom.xml	(revision 1087226)
--- jackrabbit-jcr2spi/pom.xml	(working copy)
***************
*** 88,94 ****
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-spi-commons</artifactId>
!       <version>2.2.5</version>
      </dependency>
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
--- 88,94 ----
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-spi-commons</artifactId>
!       <version>2.2.5-h3</version>
      </dependency>
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
Index: jackrabbit-spi2jcr/pom.xml
===================================================================
*** jackrabbit-spi2jcr/pom.xml	(revision 1087226)
--- jackrabbit-spi2jcr/pom.xml	(working copy)
***************
*** 99,105 ****
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-spi-commons</artifactId>
!       <version>2.2.5</version>
      </dependency>
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
--- 99,105 ----
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-spi-commons</artifactId>
!       <version>2.2.5-h3</version>
      </dependency>
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
***************
*** 129,135 ****
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-core</artifactId>
!       <version>2.2.5</version>
        <scope>test</scope>
      </dependency>
      <dependency>
--- 129,135 ----
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-core</artifactId>
!       <version>2.2.5-h3</version>
        <scope>test</scope>
      </dependency>
      <dependency>
Index: jackrabbit-webapp/pom.xml
===================================================================
*** jackrabbit-webapp/pom.xml	(revision 1087226)
--- jackrabbit-webapp/pom.xml	(working copy)
***************
*** 46,52 ****
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-core</artifactId>
!       <version>2.2.5</version>
        <exclusions>
          <exclusion>
            <groupId>log4j</groupId>
--- 46,52 ----
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-core</artifactId>
!       <version>2.2.5-h3</version>
        <exclusions>
          <exclusion>
            <groupId>log4j</groupId>
Index: jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/CargoNamePath.java
===================================================================
*** jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/CargoNamePath.java	(revision 1083698)
--- jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/CargoNamePath.java	(working copy)
***************
*** 21,27 ****
  import org.apache.jackrabbit.spi.Name;
  import org.apache.jackrabbit.spi.Path;
  
! final class NamePath extends RelativePath {
  
      /** Serial version UID */
      private static final long serialVersionUID = -2887665244213430950L;
--- 21,27 ----
  import org.apache.jackrabbit.spi.Name;
  import org.apache.jackrabbit.spi.Path;
  
! public class CargoNamePath extends RelativePath {
  
      /** Serial version UID */
      private static final long serialVersionUID = -2887665244213430950L;
***************
*** 38,49 ****
       */
      private final int index;
  
!     public NamePath(Path parent, Name name, int index) {
          super(parent);
          assert name != null;
-         assert index >= 0;
          this.name = name;
!         this.index = index;
      }
  
      protected int getDepthModifier() {
--- 38,51 ----
       */
      private final int index;
      
!     private final String argument;
! 
!     public CargoNamePath(Path parent, Name name, String argument) {
          super(parent);
          assert name != null;
          this.name = name;
!         this.index = 0;
!         this.argument = argument;
      }
  
      protected int getDepthModifier() {
***************
*** 72,94 ****
  
      @Override
      public int getIndex() {
!         return index;
      }
  
      @Override
!     public int getNormalizedIndex() {
!         if (index != INDEX_UNDEFINED) {
!             return index;
!         } else {
!             return INDEX_DEFAULT;
          }
      }
  
-     /**
-      * Returns <code>true</code> as this path ends in a named element.
-      *
-      * @return <code>true</code>
-      */
      @Override
      public boolean denotesName() {
          return true;
--- 74,102 ----
  
      @Override
      public int getIndex() {
!         return Path.INDEX_DEFAULT;
      }
  
      @Override
!     public String getIdentifier() {
!         return argument;
      }
+     
+     @Override
+     public boolean denotesIdentifier() {
+         return true;
+     }
+     
+     @Override
+     public String getString() {
+         return name + "[[" + argument + "]]";
+     }
+ 
+     @Override
+     public int getNormalizedIndex() {
+         return Path.INDEX_DEFAULT;
      }
  
      @Override
      public boolean denotesName() {
          return true;
***************
*** 113,119 ****
              if (normalized.denotesCurrent()) {
                  normalized = null; // special case: ./a
              }
!             return new NamePath(normalized, name, index);
          }
      }
  
--- 121,127 ----
              if (normalized.denotesCurrent()) {
                  normalized = null; // special case: ./a
              }
!             return new CargoNamePath(normalized, name, argument);
          }
      }
  
***************
*** 121,127 ****
          if (isCanonical()) {
              return this;
          } else if (parent != null) {
!             return new NamePath(parent.getCanonicalPath(), name, index);
          } else {
              throw new RepositoryException(
                      "There is no canonical representation of " + this);
--- 129,135 ----
          if (isCanonical()) {
              return this;
          } else if (parent != null) {
!             return new CargoNamePath(parent.getCanonicalPath(), name, argument);
          } else {
              throw new RepositoryException(
                      "There is no canonical representation of " + this);
***************
*** 136,142 ****
      @Override
      public AbstractPath getLastElement() {
          if (parent != null) {
!             return new NamePath(null, name, index);
          } else {
              return this;
          }
--- 144,150 ----
      @Override
      public AbstractPath getLastElement() {
          if (parent != null) {
!             return new CargoNamePath(null, name, argument);
          } else {
              return this;
          }

Property changes on: jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/CargoNamePath.java
___________________________________________________________________
Added: svn:mergeinfo
   Merged /jackrabbit/sandbox/JCR-2170/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java:r812417-816332
   Merged /jackrabbit/trunk/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java:r1038201,1038203,1038205,1038657,1039064,1039347,1039408,1039422-1039423,1039888,1039946,1040033,1040090,1040459,1040601,1040606,1040661,1040958,1041379,1041439,1041761,1042643,1042647,1042978-1042982,1043084-1043086,1043088,1043343,1043357-1043358,1043430,1043554,1043616,1043618,1043637,1043656,1043893,1043897,1044239,1044312,1044451,1044613,1049473,1049491,1049514,1049518,1049520,1049859,1049870,1049874,1049878,1049880,1049883,1049889,1049891,1049894-1049895,1049899-1049901,1049909-1049911,1049915-1049916,1049919,1049923,1049925,1049931,1049936,1049939,1050212,1050298,1050346,1050551,1055068,1055070-1055071,1055116-1055117,1055127,1055134,1055164,1055498,1060431,1060434,1060753,1063756,1065599,1065622,1066059,1066071,1069831,1071562,1071573,1071680,1074140,1079314,1079317
   Merged /jackrabbit/sandbox/tripod-JCR-2209/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java:r795441-795863
   Merged /jackrabbit/branches/1.5/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java:r794012,794100,794102
   Merged /jackrabbit/sandbox/JCR-1456/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/NamePath.java:r774917-886178

