<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC
  "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<!--
  Copyright 2008 Hippo

  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document>
    <properties>
        <title>Core developer information</title>
    </properties>
    <body>

<section name="Performing a release of the Hippo ECM suite">

<p>
This section described releasing a pre-initial version milestone of the
Hippo-ECM suite.  This means releasing the project as a milestone build
before a actual public release with a formal version number.
</p>
<p>
The first formally released version must be 2.01.01 because of the current
numbering scheme
</p>

<subsection name="Prerequisites">

<p>
This description is based on maven 2.1.0, which should be taken as
prerequisite.  A good prerequisite is to use a cleaned out maven repository,
although this will greatly affect the release time.  Upon a first upgrade of
maven to 2.1.0 you should do this, and this is to be performed later also on a
regular basis.
</p>

</subsection>
<subsection name="Preparing a release">

<p>
Before doing a release you should make sure you have a Jira issue.
Maintaining a release in Jira is not part of this description.
</p>

<p>
Make sure you have an up-to-date, no changes, no unknown files trunk
checkout of the full hippo-ecm suite.  In other words; do a clean
checkout.  Remove any hippo-ecm targets from your local maven repository
as well as any locally build targets that you have installed.
Then do a full build installing everything and including unit tests
(this is a must):
</p>
<source>
svn checkout 'http://svn.onehippo.org/repos/hippo/hippo-ecm/trunk' hippo-ecm
cd hippo-ecm
rm -rf ~/.m2/repository/org/hippoecm
mvn install
</source>

<!-- A shortcut is to do a "mvn -DskipTests install" instead of doing a full
     "mvn install", however strongly recommend doing a full install at least
     once to make sure all the tests are running properly.
     Note that the release procedure below REQUIRES that a "mvn install"
     was performed.
-->

<p>
Then cleanup everything again.
</p>
<source>
mvn clean
</source>

<div style="border:1px solid black; padding:1em;">
At times, it is easier to manage to release from a branch than from the
trunk in SVN.  In this case you should have a starting point with the
to-be-released state of hippo-ecm in a branch that is named the same as
the to be release version.<br/>
In the description below the tag <code>Release-HREPTWO-v2_01_00_M0</code>
is used with M0 replaced by a M followed by the milestone number where
dots are replaced by underscores.  This means that if you want to
release from a branch, then you should have your sources available at
the following URL, and checkout those in stead of the trunk:<br/>
<code>http://svn.onehippo.org/repos/hippo/hippo-ecm/branches/Release-HREPTWO-v2_01_00_M0</code>
</div><br/><br/>

<p>
At this time, make sure that any versions referenced in the documentation
are up-to-date.  In the pre-release milestones, the downloadable WARs and
EARs are referenced in the documentation and include the svn revision
number.  Check, change and commit (in the branch if created a branch) the
updated links in the documentation.
</p>

</subsection>
<subsection name="Update release information in the root pom.xml">

<p>
As a conveniance method, certain information that would otherwise need to be
given on the command like as arguments (like <code>-Dtag</code>,
<code>-DscmCommentPrefix</code>) is specified in the root pom.xml.
</p>

<p>
Modify the root <code>pom.xml</code> and update the section which starts with
</p>
<source>
  &lt;plugin&gt;
    &lt;inherited&gt;true&lt;/inherited&gt;
    &lt;artifactId&gt;maven-release-plugin&lt;/artifactId&gt;
</source>

<p>
In this section there are two entries that need updating:
</p>
<dl>
<dt>scmCommentPrefix</dt>
<dd>This is the Jira key of an <em>open</em> issue which is relevant for
performing the release, as described inthe beginning of this description.  The
string specified may not contain any spaces, must specifiy a relevant Jira key
and must end with a colon.  Better to use just the Jira key followed by a
colon.</dd>
<dt>tag</dt>
<dd>The tag name to be used in SVN.  See the Hippo conventions for how this
key must be specified, which in general will
be <code>Tag-HREPTWO-v2_xx_yy</code> where xx and yy are the two digits
numbers (using leading 0 if necessary) for the version and minor version to be
used.  Note that dots are replaced by underscore signs, otherwise the tag name
is the same as specified in the Hippo conventions.  The tag created in svn
will be:
</dd>
</dl>
<source>
http://svn.onehippo.org/repos/hippo/hippo-ecm/tags/Tag-HREPTWO-v2_xx_yy/
</source>

<p>
Note that for releasing 2.06, the <code>scmCommentPrefix</code> is already
specified correctly, and for the next release (candidate) the <code>tag</code>
parameter is also already correct.
</p>

<!-- A shortcut, which is a very bad thing to do because it violates the most
     important release guidelines normally agreed upon, is to also modify the
     preparationGoals parameter.  If you change this from "clean install" to
     "clean" no unit tests are run during the release procedure.  This has an
     enormous effect is release time, but is very dangerous and has led to
     serious release issues in the past.
-->

<p>
When having modified the pom.xml, commit the changes to SVN.
</p>

</subsection>
<subsection name="Releasing in subversion">

<!-- A shortcut, which is fairly okay to do is to skip the dry-run
     alltogether, pick up the procedure after the svn revert .
-->

<p>
Now prepare for a release, which will enter the right version numbers in
the pom.xml.  Initially this will be a dry-run and nothing will actually
be committed.
</p>

<p>
The following maven call will perform this release preparation.
</p>

<source>
mvn release:prepare -DdryRun=true
</source>

<p>
After some initial actions taken by this command, the release plugin
will prompt you for the version number to be used in the release.
For pre-initial-release versions we are using <code>2.01.00.</code>
followed by the SVN revision number of the then current trunk.
For example a version might be <code>2.01.00.13457</code> It will also
ask for the next version to be used.  Enter <code>2.01.00-SNAPSHOT</code>
for this on pre-initial-release milestone build.
</p>

<p>
Make sure there where no errors.  Some causes for problems can be:
</p>
<ul>
<li>dependencies which specifiy the version as ${parent.version} which
cannot be translated by the maven-release-plugin</li>
<li>This plugin also cannot handle optional dependencies</li>
</ul>
<p>
If everything looks sound, cleanup and do the actual release preparation:
</p>

<source>
mvn release:clean
svn --recursive revert .
mvn release:prepare
</source>

<p>
It is useless to specify a <code>-DdevelopmentVersion</code>
or <code>-DreleaseVersion</code> on the comment line, the release plugin asks
for these numbers on the comment line anyway, and does give proper defaults.
</p>

<p>
When the release:prepare command runs, it will ask after a while for the
release and development version.  The defaults presented are the correct
values to use normally.  When having pressed enter twice the actual release
will be made which takes quite amount of time due to the unit tests to be run.
</p>

<p>
The release plugin however fails due to a bug in the maven release plugin.  It
fails with the message that a certain pom.xml already exists in svn.  This
error is to be ignored, and a simple workaround for this release plugin bug is
available.  After the failure do update the svn and continue the release as
such:
</p>

<source>
svn up
mvn release:prepare -Dresume=true
</source>

<p>
This will then complete the release in subversion correctly.
</p>

<p>
Note that the current install uses the maven release plugin version
2.0-beta-8, there is a newer version 2.0-beta-9 available which should fix the
bug which leads to the initial failure of releasing and requires you to do a
&quot;svn up&quot; to continue.  However this new version 2.0-beta-9 has a
different bug which causes the scmCommentPrefix to be ignored.  Given our
settings for committing in subversion (where commits without Jira issues are
blocked), this makes it impossible to use the 2.0-beta-9 version.<br/>
Therefore the remote tagging and commitByProject commands do not resolve any
issues at this time.
</p>

<p>
Therefore the remote
</p>

</subsection>
<subsection name="Deploying the targets">

<p>
First checkout the tagged version of hippo-ecm:
</p>

<source>
svn checkout 'http://svn.onehippo.org/repos/hippo/hippo-ecm/tags/Tag-HREPTWO-v2_06_03' hippo-ecm-2.06.03
cd hippo-ecm-2.06.03
</source>

<p>
Make sure that in your local maven settings.xml configuration file
the upload ftp server is known and the credentials for uploading are
set properly.  This means that your <code>~/.m2/settings.xml</code>
file should contain a section similar to:
</p>

<source>
&lt;settings&gt;
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;repository.hippocms.org&lt;/id&gt;
      &lt;username&gt;repository&lt;/username&gt;
      &lt;password&gt;????????&lt;/password&gt;
    &lt;/server&gt;
  &lt;/servers&gt;
&lt;/settings&gt;
</source>

<p>
You should replace <code>????????</code> with the password of the maven repository ftp
server.
</p>

<p>
Now deploy the build targets, i.e. upload to the public maven repository, using:
</p>
<source>
mvn deploy
</source>

<p>
All uploads should be performed without any timeouts in one go.  If the
network connection is unstable, you have to restart the whole deploy
procedure.
</p>

</subsection>
</section>

<section name="Branching">
<source>
mvn release:branch \
  -DscmCommentPrefix="HREPTWO-1910:" \
  -DbranchName=Branch-HREPTWO-v2_02_xx \
  -DautoVersionSubmodules=true \
  -DupdateBranchVersions=true -DupdateWorkingCopyVersions=false
</source>
<p>
Enter version number 2.03.01 on all (sub)modules.
</p>
</section>

    </body>
</document>
