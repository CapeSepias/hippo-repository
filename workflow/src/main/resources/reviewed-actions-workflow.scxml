<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Copyright 2013-2014 Hippo B.V. (http://www.onehippo.com)

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  -->
<scxml version="1.0"
       xmlns="http://www.w3.org/2005/07/scxml"
       xmlns:hippo="http://www.onehippo.org/cms7/repository/scxml"
       initial="handle">

  <script>
    def sf() { dm.supportedFeatures }
    def copySource() { dm.published ?: dm.unpublished ?: null }
    def deleteSource() { dm.unpublished ?: dm.published ?: dm.draft }
    def isEditable() { !dm.draft?.holder or dm.draft?.holder==dm.user }
    def isEditing() { !!dm.draft?.holder }
    def isEditor() { dm.draft?.holder==dm.user }
    def isMyRequest() { dm.request?.owner==dm.user }
    def editor() { dm.draft?.holder }
    def hasPublishedLive() { dm.published?.isAvailable('live') }
    def hasUnpublishedPreview() { dm.unpublished?.isAvailable('preview') }
  </script>

  <parallel id="handle">

    <state id="status">
      <onentry>
        <if cond="sf().document">
          <hippo:info info="status" value="isEditable()"/>
          <hippo:action action="checkModified" value="dm.draft and dm.unpublished"/>
        </if>
      </onentry>

      <transition event="checkModified">
        <hippo:isModified/>
        <hippo:result value="dm.info['modified']"/>
      </transition>
    </state>

    <state id="edit" initial="no-edit">

      <state id="no-edit">
        <transition target="init-edit"
                    cond="(sf().document or sf().unlock)"/>
      </state>

      <state id="init-edit">
        <onentry>
          <if cond="sf().document">
            <hippo:action action="disposeEditableInstance" value="false"/>
            <hippo:action action="obtainEditableInstance" value="false"/>
            <hippo:action action="commitEditableInstance" value="false"/>
          </if>
          <if cond="sf().unlock">
            <hippo:action action="unlock" value="false"/>
          </if>
        </onentry>
        <transition target="not-editable"
                    cond="!!dm.request"/>
        <transition target="editing"
                    cond="isEditing()"/>
        <transition target="editable"/>
      </state>

      <state id="not-editable"/>

      <state id="editing">
        <onentry>
          <if cond="sf().document">
            <if cond="isEditor()">
              <hippo:action action="disposeEditableInstance" value="true"/>
              <hippo:action action="obtainEditableInstance" value="true"/>
              <hippo:action action="commitEditableInstance" value="true"/>
            <else/>
              <hippo:info info="inUseBy" value="editor()"/>
            </if>
          </if>
          <if cond="sf().unlock">
            <if cond="isEditor() or dm.isGranted(dm.draft,'hippo:admin')">
              <hippo:action action="unlock" value="true"/>
            </if>
          </if>
        </onentry>
      </state>

      <state id="editable">
        <onentry>
          <if cond="sf().document">
            <hippo:action action="obtainEditableInstance" value="true"/>
          </if>
        </onentry>
      </state>

      <transition event="disposeEditableInstance" target="reset">
        <hippo:setHolder holder="null"/>
        <hippo:result value="hasUnpublishedPreview() ? dm.unpublished : dm.published"/>
      </transition>

      <transition event="obtainEditableInstance" target="reset">
        <if cond="!!dm.unpublished">
          <hippo:copyVariant sourceState="unpublished" targetState="draft"/>
        <elseif cond="!!dm.published"/>
          <hippo:copyVariant sourceState="published" targetState="draft"/>
        </if>
        <hippo:configVariant variant="dm.draft" applyModified="true" setHolder="true"/>
        <hippo:result value="dm.draft"/>
      </transition>

      <transition event="commitEditableInstance" target="reset">
        <hippo:setHolder holder="null"/>
        <if cond="!!dm.unpublished">
          <hippo:isModified/>
        </if>
        <if cond="!dm.unpublished or dm.info['modified']">
          <hippo:copyVariant sourceState="draft" targetState="unpublished"/>
          <hippo:configVariant variant="dm.unpublished" versionable="true" applyModified="true" availabilities="preview"/>
          <if cond="!!dm.published">
            <if cond="hasPublishedLive()">
              <hippo:configVariant variant="dm.published" availabilities="live"/>
            <else/>
              <hippo:configVariant variant="dm.published" availabilities="null"/>
            </if>
          </if>
        </if>
        <hippo:result value="dm.unpublished"/>
      </transition>

      <transition event="unlock" target="reset">
        <hippo:setHolder holder="dm.user"/>
      </transition>

    </state>

    <state id="request" initial="no-request">

      <state id="no-request">
        <transition target="init-request"
                    cond="sf().request"/>
      </state>

      <state id="init-request">
        <!-- Note: transition for request-rejected MUST be evaluated before transition for requested
                   because if the subject is a rejected request only its state is to be considered
        -->
        <!-- TODO: fixup request handling
        <transition target="request-rejected"
                    cond="!empty(dm.rr)"/>
        <transition target="requested"
                    cond="!empty(dm.r)"/>
        -->
        <transition target="not-requested"/>
      </state>

      <state id="request-rejected">
        <onentry>
          <hippo:action action="acceptRequest" value="false"/>
          <hippo:action action="rejectRequest" value="false"/>
          <hippo:action action="cancelRequest" value="true"/>
        </onentry>
      </state>

      <state id="requested">
        <onentry>
          <if cond="isMyRequest()">
            <hippo:action action="cancelRequest" value="true"/>
          <else/>
            <hippo:action action="cancelRequest" value="false"/>
          </if>
          <if cond="dm.isGranted(dm.request,'hippo:editor')">
            <hippo:action action="acceptRequest" value="true"/>
            <if cond="isMyRequest()">
              <hippo:action action="rejectRequest" value="false"/>
            <else/>
              <hippo:action action="rejectRequest" value="true"/>
            </if>
          </if>
        </onentry>
      </state>

      <state id="not-requested"/>

      <transition event="acceptRequest" target="reset">
        <if cond="dm.request?.type=='delete'">
          <hippo:workflowException errorExpr="'Cannot delete document when still published'"
                                   cond="hasPublishedLive()"/>
          <hippo:workflowException errorExpr="'Cannot delete document which is being edited'"
                                   cond="isEditing()"/>

          <hippo:deleteRequest/>
          <hippo:invokeDocumentWorkflow action="delete"
                                        subjectExpr="deleteSource()"/>

        <elseif cond="dm.request?.type in (String[])['publish','schedpublish]"/>
          <hippo:workflowException errorExpr="'Cannot publish document which is being edited'"
                                   cond="isEditing()"/>
          <hippo:workflowException errorExpr="'Cannot publish document when no changes present'"
                                   cond="dm.unpublished and (!dm.published or dm.unpublished.lastModified!=dm.published.lastModified or !hasPublishedLive())" />

          <hippo:deleteRequest/>
          <if cond="dm.request?.type=='publish'">
            <hippo:invokeDocumentWorkflow action="publish" subjectExpr="dm.unpublished"/>
          <else/>
            <hippo:invokeDocumentWorkflow action="schedpublish" whenExpr="dm.request.scheduledDate" subjectExpr="dm.request.reference"/>
          </if>

        <elseif cond="dm.request?.type in (String[])['depublish','schedpublish]"/>
          <hippo:workflowException errorExpr="'Cannot depublish document which is being edited'"
                                   cond="isEditing()"/>
          <hippo:workflowException errorExpr="'Cannot depublish document when not published'"
                                   cond="hasPublishedLive()" />

          <hippo:deleteRequest/>
          <if cond="dm.request?.type=='depublish'">
            <hippo:invokeDocumentWorkflow action="publish" subjectExpr="dm.published"/>
          <else/>
            <hippo:invokeDocumentWorkflow action="scheddepublish" whenExpr="dm.request.scheduledDate" subjectExpr="dm.request.reference"/>
          </if>

        <elseif cond="dm.request?.type=='rejected"/>
          <hippo:workflowException errorExpr="'Request has already been rejected'"/>
        <else/>
          <hippo:workflowException errorExpr="'Unknown request type '+dm.request?.type"/>
        </if>
      </transition>

    </state>

    <state id="publish" initial="no-publish">

      <state id="no-publish">
        <transition target="init-publish"
                    cond="sf().document"/>
      </state>

      <state id="init-publish">
        <onentry>
          <hippo:action action="publish" value="false"/>
        </onentry>
        <transition target="publishable"
                    cond="!isEditing() and dm.unpublished and (!dm.published or dm.unpublished.lastModified!=dm.published.lastModified or !hasPublishedLive())"/>
        <transition target="not-publishable"/>
      </state>

      <state id="not-publishable"/>

      <state id="publishable">
        <onentry>
          <if cond="!dm.request or dm.user=='system'">
            <hippo:action action="publish" value="true"/>
            <hippo:action action="requestPublish" value="true"/>
          </if>
        </onentry>
      </state>

      <transition event="publish" target="reset">
        <hippo:copyVariant sourceState="unpublished" targetState="published"/>
        <hippo:configVariant variant="dm.published" versionable="false" availabilities="live"/>
      </transition>

    </state>

    <state id="depublish" initial="no-depublish">

      <state id="no-depublish">
        <transition target="init-depublish"
                    cond="sf().document"/>
      </state>

      <state id="init-depublish">
        <onentry>
          <hippo:action action="depublish" value="false"/>
        </onentry>
        <transition target="depublishable"
                    cond="!isEditing() and hasPublishedLive()"/>
        <transition target="not-depublishable"/>
      </state>

      <state id="not-depublishable"/>

      <state id="depublishable">
        <onentry>
          <if cond="(!dm.request or dm.user=='system') and dm.states in (String[])['p','dp']">
            <hippo:action action="depublish" value="true"/>
            <hippo:action action="requestDepublish" value="true"/>
          </if>
        </onentry>
      </state>

    </state>

    <state id="versioning" initial="no-versioning">

      <state id="no-versioning">
        <transition target="version"
                    cond="sf().version"/>
      </state>

      <state id="version">
        <onentry>
<!--
          <if cond="empty(dm.v)">
-->
          <hippo:action action="version" value="true"/>
          <hippo:action action="listVersions" value="true"/>
          <hippo:action action="restoreVersion" value="true"/>
          <hippo:action action="revertVersion" value="true"/>
<!--
          <else/>
            <hippo:action action="restoreVersionTo" value="true"/>
          </if>
-->
        </onentry>
      </state>

    </state>

    <state id="terminate" initial="no-terminate">

      <state id="no-terminate">
        <transition target="terminateable"
                    cond="sf().document and (!dm.published or !hasPublishedLive()) and !isEditing() and !dm.request"/>
      </state>

      <state id="terminateable">
        <onentry>
          <hippo:action action="delete" value="true"/>
          <hippo:action action="requestDelete" value="true"/>
          <if cond="dm.isGranted(deleteSource(), 'hippo:editor')">
            <hippo:action action="move" value="true"/>
            <hippo:action action="rename" value="true"/>
          </if>
        </onentry>
      </state>

    </state>

    <state id="copy" initial="no-copy">

      <state id="no-copy">
        <transition target="copyable"
                    cond="sf().document and dm.isGranted(copySource(),'hippo:editor')"/>
      </state>

      <state id="copyable">
        <onentry>
          <hippo:action action="copy" value="true"/>
        </onentry>
      </state>

    </state>

  </parallel>

  <final id="reset"/>
  <final id="terminated" />
  <final id="invalid-context" />

</scxml>