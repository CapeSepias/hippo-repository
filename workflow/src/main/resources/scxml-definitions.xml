<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2013 Hippo B.V. (http://www.onehippo.com)

  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<sv:node xmlns:sv="http://www.jcp.org/jcr/sv/1.0" sv:name="hipposcxml:definitions">
  <sv:property sv:name="jcr:primaryType" sv:type="Name">
    <sv:value>hipposcxml:definitions</sv:value>
  </sv:property>
  <sv:node sv:name="reviewed-actions-workflow">
    <sv:property sv:name="jcr:primaryType" sv:type="Name">
      <sv:value>hipposcxml:scxml</sv:value>
    </sv:property>
    <sv:property sv:name="hipposcxml:source" sv:type="String">
      <sv:value><![CDATA[
<scxml xmlns="http://www.w3.org/2005/07/scxml" xmlns:hippo="http://www.onehippo.org/cms7/repository/scxml" version="1.0" initial="reset-event-result">

  <state id="reset-event-result" initial="handle">
    <onentry>
      <script>
        // clear possible previous result, always start empty
        eventResult = null;
      </script>
    </onentry>

    <parallel id="handle">

      <onentry>
        <script>
          notEditing = !dm.d or !dm.d.holder;

          editable = notEditing or dm.d.holder == dm.user;
          canEdit = !dm.r and editable;
          canDispose = dm.d and dm.d.holder and dm.d.holder == dm.user;
          // Note: current workflow doesn't check against empty request
          canCommit = !dm.r and canDispose;

          // system user is allowed to (de)publish when a dm.r exists because that's how a scheduled request is processed
          systemUser = dm.user == 'system';
          canPublish = (systemUser or !dm.r) and notEditing and dm.u and (!dm.p or dm.p.stateSummary =~ ['new','changed']);
          canDepublish = (systemUser or !dm.r) and notEditing and dm.p and dm.p.stateSummary =~ ['changed','live'];

          canDelete = !dm.r and notEditing and (!dm.p or dm.p.stateSummary == 'new');
          canCopy = dm.u or dm.p;

          dm.hints["obtainEditableInstance"] = canEdit;
          dm.hints["disposeEditableInstance"] = canDispose;
          dm.hints["commitEditableInstance"] = canCommit;
          dm.hints["publish"] = canPublish;
          dm.hints["depublish"] = canDepublish;
          dm.hints["delete"] = canDelete;
          dm.hints["rename"] = canDelete;
          dm.hints["move"] = canDelete;
          dm.hints["copy"] = canCopy;

          dm.hints["status"] = editable;
          if (dm.ss == 'draft' and !editable) {
          dm.hints["inUseBy"] = dm.holder;
          }
        </script>
        <hippo:ismodified/>
      </onentry>

      <transition event="workflow.event.document.copy" cond="dm.hints['copy']" target="handle">
        <hippo:copydocument destinationExpr="_eventdata.destination" newNameExpr="_eventdata.newName" />
      </transition>

      <transition event="workflow.event.document.move" cond="dm.hints['move']" target="handle">
        <hippo:movedocument destinationExpr="_eventdata.destination" newNameExpr="_eventdata.newName" />
      </transition>

      <transition event="workflow.event.document.rename" cond="dm.hints['rename']" target="handle">
        <hippo:renamedocument newNameExpr="_eventdata" />
      </transition>

      <transition event="workflow.event.document.delete" cond="dm.hints['delete']" target="deleted">
        <hippo:archive />
      </transition>

      <state id="draft" initial="draft-init">

        <transition event="workflow.event.document.edit.obtain" cond="dm.hints['obtainEditableInstance']" target="handle">
          <if cond="!dm.d or !dm.d.holder">
            <if cond="not empty(dm.u)">
              <hippo:copyvariant sourceState="unpublished" targetState="draft" skipIndex="true" applyModified="true"/>
              <else/>
              <hippo:copyvariant sourceState="published" targetState="draft" skipIndex="true" applyModified="true"/>
            </if>
            <script>
              dm.d.holder = dm.user;
            </script>
          </if>
          <script>
            eventResult = dm.d;
          </script>
        </transition>

        <transition event="workflow.event.document.edit.commit" cond="dm.hints['commitEditableInstance']" target="handle">
          <script>
            dm.d.holder = null;
          </script>
          <hippo:copyvariant sourceState="draft" targetState="unpublished" versionable="true" applyModified="true"/>
          <script>
            dm.u.availability = ["preview"];
            if (dm.p and dm.p.stateSummary =~ "live") {
            dm.p.availability = ["live"];
            }
            eventResult = dm.u;
          </script>
        </transition>

        <transition event="workflow.event.document.edit.dispose" cond="dm.hints['disposeEditableInstance']" target="handle">
          <script>
            dm.d.holder = null;
            eventResult = dm.u and dm.u.availability =~ "preview" ? dm.u : dm.p ?: null;
          </script>
        </transition>

        <state id="draft-init">
          <transition cond="dm.d and !dm.d.holder and dm.d.stateSummary == 'new'" target="draft-nonediting-new" />
          <transition cond="dm.d and !dm.d.holder and dm.d.stateSummary == 'live'" target="draft-nonediting-live" />
          <transition cond="dm.d and !dm.d.holder and dm.d.stateSummary == 'changed'" target="draft-nonediting-changed" />
          <transition cond="dm.d and dm.d.stateSummary == 'new'" target="draft-editing-new" />
          <transition cond="dm.d and dm.d.stateSummary == 'live'" target="draft-editing-live" />
          <transition cond="dm.d and dm.d.stateSummary == 'changed'" target="draft-editing-changed" />
          <transition target="draft-unavailable" />
        </state>

        <state id="draft-nonediting-new"/>
        <state id="draft-nonediting-live"/>
        <state id="draft-nonediting-changed"/>
        <state id="draft-editing-new"/>
        <state id="draft-editing-live"/>
        <state id="draft-editing-changed"/>
        <state id="draft-unavailable"/>

      </state>

      <state id="unpublished" initial="unpublished-init">

        <transition event="workflow.event.document.publish" cond="dm.hints['publish']" target="handle">
          <hippo:copyvariant sourceState="unpublished" targetState="published" applyModified="true"/>
          <script>
            dm.p.availability = ["preview", "live"];
            dm.p.publicationDate = new("java.util.Date");
            dm.u.availability = null;
            // must save JCR session first before checkin
            dm.u.node.session.save();
            // now make version
            dm.u.node.checkin();
          </script>
        </transition>

        <transition event="workflow.event.document.schedule.publish" cond="dm.hints['publish']" target="handle">
          <hippo:schedulerequest type="publish" targetDateExpr="_eventdata"/>
        </transition>

        <state id="unpublished-init">
          <transition cond="dm.u and dm.u.stateSummary == 'new'" target="unpublished-new" />
          <transition cond="dm.u and dm.u.stateSummary == 'live'" target="unpublished-live" />
          <transition cond="dm.u and dm.u.stateSummary == 'changed'" target="unpublished-changed" />
          <transition target="unpublished-unavailable" />
        </state>

        <state id="unpublished-new"/>
        <state id="unpublished-live"/>
        <state id="unpublished-changed"/>
        <state id="unpublished-unavailable"/>

      </state>

      <state id="published" initial="published-init">

        <transition event="workflow.event.document.depublish" cond="dm.hints['depublish']" target="handle">
          <if cond="!dm.u">
            <hippo:copyvariant sourceState="published" targetState="unpublished" versionable="true"/>
          </if>
          <script>
            dm.p.availability = null;
            dm.u.availability = ["preview"];
            dm.u.modified = dm.user;
            // must save JCR session first before checkin
            dm.u.node.session.save();
            // now make version
            dm.u.node.checkin();
          </script>
        </transition>

        <transition event="workflow.event.document.schedule.depublish" cond="dm.hints['depublish']" target="handle">
          <hippo:schedulerequest type="depublish" targetDateExpr="_eventdata"/>
        </transition>

        <state id="published-init">
          <transition cond="dm.p and dm.p.stateSummary == 'live'" target="published-live" />
          <transition cond="dm.p and dm.p.stateSummary == 'new'" target="published-new" />
          <transition cond="dm.p and dm.p.stateSummary == 'changed'" target="published-changed" />
          <transition target="published-unavailable" />
        </state>

        <state id="published-new"/>
        <state id="published-live"/>
        <state id="published-changed"/>
        <state id="published-unavailable"/>

      </state>

      <state id="request" initial="request-init">

        <state id="request-init">
          <transition cond="dm.r and dm.r.type == 'publish'" target="request-publication" />
          <transition cond="dm.r and dm.r.type == 'depublish'" target="request-depublication" />
          <transition cond="dm.r and dm.r.type == 'scheduledpublish'" target="request-schedule-publication" />
          <transition cond="dm.r and dm.r.type == 'scheduleddepublish'" target="request-schedule-depublication" />
          <transition target="request-unavailable" />
        </state>

        <state id="request-publication"/>
        <state id="request-depublication"/>
        <state id="request-schedule-publication"/>
        <state id="request-schedule-depublication"/>
        <state id="request-unavailable"/>

      </state>

    </parallel>

  </state>

  <final id="deleted" />

</scxml>
          ]]></sv:value>
    </sv:property>
    <sv:node sv:name="copyvariant">
      <sv:property sv:name="jcr:primaryType" sv:type="Name">
        <sv:value>hipposcxml:action</sv:value>
      </sv:property>
      <sv:property sv:name="hipposcxml:namespace" sv:type="String">
        <sv:value>http://www.onehippo.org/cms7/repository/scxml</sv:value>
      </sv:property>
      <sv:property sv:name="hipposcxml:classname" sv:type="String">
        <sv:value>org.onehippo.repository.documentworkflow.action.CopyVariantDelegatingAction</sv:value>
      </sv:property>
    </sv:node>
    <sv:node sv:name="request">
      <sv:property sv:name="jcr:primaryType" sv:type="Name">
        <sv:value>hipposcxml:action</sv:value>
      </sv:property>
      <sv:property sv:name="hipposcxml:namespace" sv:type="String">
        <sv:value>http://www.onehippo.org/cms7/repository/scxml</sv:value>
      </sv:property>
      <sv:property sv:name="hipposcxml:classname" sv:type="String">
        <sv:value>org.onehippo.repository.documentworkflow.action.RequestDelegatingAction</sv:value>
      </sv:property>
    </sv:node>
    <sv:node sv:name="archive">
      <sv:property sv:name="jcr:primaryType" sv:type="Name">
        <sv:value>hipposcxml:action</sv:value>
      </sv:property>
      <sv:property sv:name="hipposcxml:namespace" sv:type="String">
        <sv:value>http://www.onehippo.org/cms7/repository/scxml</sv:value>
      </sv:property>
      <sv:property sv:name="hipposcxml:classname" sv:type="String">
        <sv:value>org.onehippo.repository.documentworkflow.action.ArchiveDelegatingAction</sv:value>
      </sv:property>
    </sv:node>
    <sv:node sv:name="ismodified">
      <sv:property sv:name="jcr:primaryType" sv:type="Name">
        <sv:value>hipposcxml:action</sv:value>
      </sv:property>
      <sv:property sv:name="hipposcxml:namespace" sv:type="String">
        <sv:value>http://www.onehippo.org/cms7/repository/scxml</sv:value>
      </sv:property>
      <sv:property sv:name="hipposcxml:classname" sv:type="String">
        <sv:value>org.onehippo.repository.documentworkflow.action.IsModifiedDelegatingAction</sv:value>
      </sv:property>
    </sv:node>
    <sv:node sv:name="schedulerequest">
      <sv:property sv:name="jcr:primaryType" sv:type="Name">
        <sv:value>hipposcxml:action</sv:value>
      </sv:property>
      <sv:property sv:name="hipposcxml:namespace" sv:type="String">
        <sv:value>http://www.onehippo.org/cms7/repository/scxml</sv:value>
      </sv:property>
      <sv:property sv:name="hipposcxml:classname" sv:type="String">
        <sv:value>org.onehippo.repository.documentworkflow.action.ScheduleRequestDelegatingAction</sv:value>
      </sv:property>
    </sv:node>
    <sv:node sv:name="copydocument">
      <sv:property sv:name="jcr:primaryType" sv:type="Name">
        <sv:value>hipposcxml:action</sv:value>
      </sv:property>
      <sv:property sv:name="hipposcxml:namespace" sv:type="String">
        <sv:value>http://www.onehippo.org/cms7/repository/scxml</sv:value>
      </sv:property>
      <sv:property sv:name="hipposcxml:classname" sv:type="String">
        <sv:value>org.onehippo.repository.documentworkflow.action.CopyDocumentDelegatingAction</sv:value>
      </sv:property>
    </sv:node>
    <sv:node sv:name="movedocument">
      <sv:property sv:name="jcr:primaryType" sv:type="Name">
        <sv:value>hipposcxml:action</sv:value>
      </sv:property>
      <sv:property sv:name="hipposcxml:namespace" sv:type="String">
        <sv:value>http://www.onehippo.org/cms7/repository/scxml</sv:value>
      </sv:property>
      <sv:property sv:name="hipposcxml:classname" sv:type="String">
        <sv:value>org.onehippo.repository.documentworkflow.action.MoveDocumentDelegatingAction</sv:value>
      </sv:property>
    </sv:node>
    <sv:node sv:name="renamedocument">
      <sv:property sv:name="jcr:primaryType" sv:type="Name">
        <sv:value>hipposcxml:action</sv:value>
      </sv:property>
      <sv:property sv:name="hipposcxml:namespace" sv:type="String">
        <sv:value>http://www.onehippo.org/cms7/repository/scxml</sv:value>
      </sv:property>
      <sv:property sv:name="hipposcxml:classname" sv:type="String">
        <sv:value>org.onehippo.repository.documentworkflow.action.RenameDocumentDelegatingAction</sv:value>
      </sv:property>
    </sv:node>
  </sv:node>
</sv:node>