<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Copyright 2013 Hippo B.V. (http://www.onehippo.com)

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  -->
<scxml version="1.0"
       xmlns="http://www.w3.org/2005/07/scxml"
       xmlns:hippo="http://www.onehippo.org/cms7/repository/scxml"
       initial="handle">

  <parallel id="handle">

    <state id="status">
      <onentry>
        <if cond="dm.sf.document">
          <hippo:info info="status" value="false"/>
          <hippo:action action="checkModified" value="dm.ss=='draft' and !empty(dm.u)"/>
          <if cond="!(!empty(dm.d.holder) and dm.d.holder!=dm.user)">
            <!--not draft in use by other user -->
            <if cond="dm.ss=='unpublished' or (empty(dm.u) and (dm.ss=='published' or (dm.ss=='draft' and empty(dm.p))))">
              <!-- status on unpublished or published if no unpublished or draft if also no published -->
              <hippo:info info="status" value="true"/>
            </if>
          </if>
        </if>
      </onentry>
    </state>

    <state id="edit" initial="no-edit">

      <state id="no-edit">
        <transition target="init-edit"
                    cond="dm.sf.document or dm.sf.unlock"/>
      </state>

      <state id="init-edit">
        <onentry>
          <if cond="dm.sf.document">
            <hippo:action action="disposeEditableInstance" value="false"/>
            <hippo:action action="obtainEditableInstance" value="false"/>
            <hippo:action action="commitEditableInstance" value="false"/>
          </if>
          <if cond="dm.sf.unlock">
            <hippo:action action="unlock" value="false"/>
          </if>
        </onentry>
        <transition target="not-editable"
                    cond="!empty(dm.r) or !empty(dm.rr)"/>
        <transition target="editing"
                    cond="!empty(dm.d) and !empty(dm.d.holder)"/>
        <transition target="editable"/>
      </state>

      <state id="not-editable"/>

      <state id="editing">
        <onentry>
          <if cond="dm.sf.document">
            <if cond="dm.ss=='draft' and dm.d.holder==dm.user">
              <hippo:action action="disposeEditableInstance" value="true"/>
              <hippo:action action="obtainEditableInstance" value="true"/>
              <hippo:action action="commitEditableInstance" value="true"/>
            </if>
            <if cond="dm.ss=='draft' and dm.d.holder!=dm.user">
              <hippo:action action="inUseBy" value="dm.d.holder"/>
            </if>
          </if>
          <if cond="dm.sf.unlock">
            <if cond="dm.ss=='draft' and (dm.d.holder==dm.user or dm.pm('hippo:admin'))">
              <hippo:action action="unlock" value="true"/>
            </if>
          </if>
        </onentry>
      </state>

      <state id="editable">
        <onentry>
          <if cond="dm.sf.document">
            <if cond="dm.ss=='unpublished' or (dm.ss=='draft' and empty(dm.u)) or dm.s=='p'">
              <hippo:action action="obtainEditableInstance" value="true"/>
            </if>
          </if>
        </onentry>
      </state>

    </state>

    <state id="request" initial="no-request">

      <state id="no-request">
        <transition target="init-request"
                    cond="dm.sf.request"/>
      </state>

      <state id="init-request">
        <!-- Note: transition for request-rejected MUST be evaluated before transition for requested
                   because if the subject is a rejected request only its state is to be considered
        -->
        <transition target="request-rejected"
                    cond="!empty(dm.rr)"/>
        <transition target="requested"
                    cond="!empty(dm.r)"/>
        <transition target="not-requested"/>
      </state>

      <state id="request-rejected">
        <onentry>
          <hippo:action action="acceptRequest" value="false"/>
          <hippo:action action="rejectRequest" value="false"/>
          <if cond="(!empty(dm.rr.owner) and dm.rr.owner==dm.user) or dm.pm('hippo:editor')">
            <hippo:action action="cancelRequest" value="true"/>
          <else/>
            <hippo:action action="cancelRequest" value="false"/>
          </if>
        </onentry>
      </state>

      <state id="requested">
        <onentry>
          <if cond="!empty(dm.r.owner) and dm.r.owner==dm.user">
            <hippo:action action="cancelRequest" value="true"/>
          <else/>
            <hippo:action action="cancelRequest" value="false"/>
          </if>
          <if cond="dm.pm('hippo:editor')">
            <hippo:action action="acceptRequest" value="true"/>
            <if cond="!empty(dm.r.owner) and dm.r.owner==dm.user">
              <hippo:action action="rejectRequest" value="false"/>
            <else/>
              <hippo:action action="rejectRequest" value="true"/>
            </if>
          </if>
        </onentry>
      </state>

      <state id="not-requested"/>

    </state>

    <state id="publish" initial="no-publish">

      <state id="no-publish">
        <transition target="init-publish"
                    cond="dm.sf.document"/>
      </state>

      <state id="init-publish">
        <onentry>
          <hippo:action action="publish" value="false"/>
        </onentry>
        <transition target="publishable"
                    cond="!empty(dm.ss) and empty(dm.d.holder) and !empty(dm.u) and (empty(dm.p) or dm.u.lastModified!=dm.p.lastModified or !dm.p.isAvailable('live'))"/>
        <transition target="not-publishable"/>
      </state>

      <state id="not-publishable"/>

      <state id="publishable">
        <onentry>
          <if cond="(empty(dm.r) or dm.user=='system') and dm.ss=='unpublished'">
            <hippo:action action="publish" value="true"/>
          </if>
        </onentry>
      </state>

    </state>

    <state id="depublish" initial="no-depublish">

      <state id="no-depublish">
        <transition target="init-depublish"
                    cond="dm.sf.document"/>
      </state>

      <state id="init-depublish">
        <onentry>
          <hippo:action action="depublish" value="false"/>
        </onentry>
        <transition target="depublishable"
                    cond="!empty(dm.ss) and empty(dm.d.holder) and !empty(dm.p) and dm.p.isAvailable('live')"/>
        <transition target="not-depublishable"/>
      </state>

      <state id="not-depublishable"/>

      <state id="depublishable">
        <onentry>
          <if cond="(empty(dm.r) or dm.user=='system') and (dm.ss=='unpublished' or dm.s=='p' or (dm.s=='dp' and dm.ss=='draft'))">
            <hippo:action action="depublish" value="true"/>
          </if>
        </onentry>
      </state>

    </state>

    <state id="versioning" initial="no-versioning">

      <state id="no-versioning">
        <transition target="version"
                    cond="dm.sf.version and dm.ss=='unpublished'"/>
      </state>

      <state id="version">
        <onentry>
          <if cond="empty(dm.v)">
            <hippo:action action="version" value="true"/>
            <hippo:action action="listVersions" value="true"/>
            <hippo:action action="restoreVersion" value="true"/>
            <hippo:action action="revertVersion" value="true"/>
          <else/>
            <hippo:action action="restoreVersionTo" value="true"/>
          </if>
        </onentry>
      </state>

    </state>

    <state id="terminate" initial="no-terminate">

      <state id="no-terminate">
        <transition target="init-terminate"
                    cond="dm.sf.document and (empty(dm.p) or !dm.p.isAvailable('live')) and empty(dm.d.holder) and empty(dm.r)"/>
      </state>

      <state id="init-terminate">
        <transition target="terminateable"
                    cond="dm.ss=='unpublished' or (dm.ss=='published' and empty(dm.u)) or (dm.ss=='draft' and dm.s=='d')"/>
        <transition target="not-terminateable"/>
      </state>

      <state id="terminateable">
        <onentry>
          <hippo:action action="delete" value="true"/>
          <if cond="dm.pm('hippo:editor')">
            <hippo:action action="move" value="true"/>
            <hippo:action action="rename" value="true"/>
          </if>
        </onentry>
      </state>
      <state id="not-terminateable">
        <onentry>
          <hippo:action action="delete" value="false"/>
          <if cond="dm.pm('hippo:editor')">
            <hippo:action action="move" value="false"/>
            <hippo:action action="rename" value="false"/>
          </if>
        </onentry>
      </state>

    </state>

    <state id="copy" initial="no-copy">

      <state id="no-copy">
        <transition target="init-copy"
                    cond="dm.sf.document and dm.ss!='' and dm.pm('hippo:editor')"/>
      </state>

      <state id="init-copy">
        <transition target="copyable"
                    cond="dm.ss=='unpublished' or (dm.ss=='published' and empty(dm.u))"/>
        <transition target="not-copyable"/>
      </state>

      <state id="not-copyable">
        <onentry>
          <hippo:action action="copy" value="false"/>
        </onentry>
      </state>
      <state id="copyable">
        <onentry>
          <hippo:action action="copy" value="true"/>
        </onentry>
      </state>

    </state>

  </parallel>

  <final id="terminated" />

</scxml>
