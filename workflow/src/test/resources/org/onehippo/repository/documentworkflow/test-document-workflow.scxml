<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Copyright 2013 Hippo B.V. (http://www.onehippo.com)

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<scxml xmlns="http://www.w3.org/2005/07/scxml" xmlns:hippo="http://www.onehippo.org/cms7/repository/scxml" version="1.0" initial="reset-event-result">

  <state id="reset-event-result" initial="handle">
    <onentry>
      <script>
        // clear possible previous result, always start empty
        eventResult = null;
      </script>
    </onentry>

    <parallel id="handle">

      <onentry>
        <script>
          notEditing = !handle.draft or !handle.draft.owner;

          editable = notEditing or handle.draft.owner == handle.user;
          canEdit = !handle.request and editable;
          canDispose = handle.draft and handle.draft.owner and handle.draft.owner == handle.user;
          // Note: current workflow doesn't check against empty request
          canCommit = !handle.request and canDispose;

          // system user is allowed to (de)publish when a handle.request exists because that's how a scheduled request is processed
          systemUser = handle.user == 'system';
          canPublish = (systemUser or !handle.request) and notEditing and handle.unpublished and (!handle.published or handle.published.stateSummary =~ ['new','changed']);
          canDepublish = (systemUser or !handle.request) and notEditing and handle.published and handle.published.stateSummary =~ ['changed','live'];

          canDelete = !handle.request and notEditing and (!handle.published or handle.published.stateSummary == 'new');
          canCopy = handle.unpublished or handle.published;

          handle.hints["obtainEditableInstance"] = canEdit;
          handle.hints["disposeEditableInstance"] = canDispose;
          handle.hints["commitEditableInstance"] = canCommit;
          handle.hints["publish"] = canPublish;
          handle.hints["depublish"] = canDepublish;
          handle.hints["delete"] = canDelete;
          handle.hints["rename"] = canDelete;
          handle.hints["move"] = canDelete;
          handle.hints["copy"] = canCopy;

          handle.hints["status"] = editable;
          if (handle.workflowState == 'draft' and !editable) {
          handle.hints["inUseBy"] = handle.owner;
          }
        </script>
        <hippo:ismodified/>
      </onentry>

      <transition event="workflow.event.document.copy" cond="handle.hints['copy']" target="handle">
        <hippo:copydocument destinationExpr="_eventdata.destination" newNameExpr="_eventdata.newName" />
      </transition>

      <transition event="workflow.event.document.move" cond="handle.hints['move']" target="handle">
        <hippo:movedocument destinationExpr="_eventdata.destination" newNameExpr="_eventdata.newName" />
      </transition>

      <transition event="workflow.event.document.rename" cond="handle.hints['rename']" target="handle">
        <hippo:renamedocument newNameExpr="_eventdata" />
      </transition>

      <transition event="workflow.event.document.delete" cond="handle.hints['delete']" target="deleted">
        <hippo:archive />
      </transition>

      <state id="draft" initial="draft-init">

        <transition event="workflow.event.document.edit.obtain" cond="handle.hints['obtainEditableInstance']" target="handle">
          <if cond="!handle.draft or !handle.draft.owner">
            <if cond="not empty(handle.unpublished)">
              <hippo:copyvariant sourceState="unpublished" targetState="draft" skipIndex="true" applyModified="true"/>
              <else/>
              <hippo:copyvariant sourceState="published" targetState="draft" skipIndex="true" applyModified="true"/>
            </if>
            <script>
              handle.draft.owner = handle.user;
            </script>
          </if>
          <script>
            eventResult = handle.draft;
          </script>
        </transition>

        <transition event="workflow.event.document.edit.commit" cond="handle.hints['commitEditableInstance']" target="handle">
          <script>
            handle.draft.owner = null;
          </script>
          <hippo:copyvariant sourceState="draft" targetState="unpublished" versionable="true" applyModified="true"/>
          <script>
            handle.unpublished.availability = ["preview"];
            if (handle.published and handle.published.stateSummary =~ "live") {
            handle.published.availability = ["live"];
            }
            eventResult = handle.unpublished;
          </script>
        </transition>

        <transition event="workflow.event.document.edit.dispose" cond="handle.hints['disposeEditableInstance']" target="handle">
          <script>
            handle.draft.owner = null;
            eventResult = handle.unpublished and handle.unpublished.availability =~ "preview" ? handle.unpublished : handle.published ?: null;
          </script>
        </transition>

        <state id="draft-init">
          <transition cond="handle.draft and !handle.draft.owner and handle.draft.stateSummary == 'new'" target="draft-nonediting-new" />
          <transition cond="handle.draft and !handle.draft.owner and handle.draft.stateSummary == 'live'" target="draft-nonediting-live" />
          <transition cond="handle.draft and !handle.draft.owner and handle.draft.stateSummary == 'changed'" target="draft-nonediting-changed" />
          <transition cond="handle.draft and handle.draft.stateSummary == 'new'" target="draft-editing-new" />
          <transition cond="handle.draft and handle.draft.stateSummary == 'live'" target="draft-editing-live" />
          <transition cond="handle.draft and handle.draft.stateSummary == 'changed'" target="draft-editing-changed" />
          <transition target="draft-unavailable" />
        </state>

        <state id="draft-nonediting-new"/>
        <state id="draft-nonediting-live"/>
        <state id="draft-nonediting-changed"/>
        <state id="draft-editing-new"/>
        <state id="draft-editing-live"/>
        <state id="draft-editing-changed"/>
        <state id="draft-unavailable"/>

      </state>

      <state id="unpublished" initial="unpublished-init">

        <transition event="workflow.event.document.publish" cond="handle.hints['publish']" target="handle">
          <hippo:copyvariant sourceState="unpublished" targetState="published" applyModified="true"/>
          <script>
            handle.published.availability = ["preview", "live"];
            handle.published.publicationDate = new("java.util.Date");
            handle.unpublished.availability = null;
            // must save JCR session first before checkin
            handle.unpublished.node.session.save();
            // now make version
            handle.unpublished.node.checkin();
          </script>
        </transition>

        <transition event="workflow.event.document.schedule.publish" cond="handle.hints['publish']" target="handle">
          <hippo:schedulerequest type="publish" targetDateExpr="_eventdata"/>
        </transition>

        <state id="unpublished-init">
          <transition cond="handle.unpublished and handle.unpublished.stateSummary == 'new'" target="unpublished-new" />
          <transition cond="handle.unpublished and handle.unpublished.stateSummary == 'live'" target="unpublished-live" />
          <transition cond="handle.unpublished and handle.unpublished.stateSummary == 'changed'" target="unpublished-changed" />
          <transition target="unpublished-unavailable" />
        </state>

        <state id="unpublished-new"/>
        <state id="unpublished-live"/>
        <state id="unpublished-changed"/>
        <state id="unpublished-unavailable"/>

      </state>

      <state id="published" initial="published-init">

        <transition event="workflow.event.document.depublish" cond="handle.hints['depublish']" target="handle">
          <if cond="!handle.unpublished">
            <hippo:copyvariant sourceState="published" targetState="unpublished" versionable="true"/>
          </if>
          <script>
            handle.published.availability = null;
            handle.unpublished.availability = ["preview"];
            handle.unpublished.modified = handle.user;
            // must save JCR session first before checkin
            handle.unpublished.node.session.save();
            // now make version
            handle.unpublished.node.checkin();
          </script>
        </transition>

        <transition event="workflow.event.document.schedule.depublish" cond="handle.hints['depublish']" target="handle">
          <hippo:schedulerequest type="depublish" targetDateExpr="_eventdata"/>
        </transition>

        <state id="published-init">
          <transition cond="handle.published and handle.published.stateSummary == 'live'" target="published-live" />
          <transition cond="handle.published and handle.published.stateSummary == 'new'" target="published-new" />
          <transition cond="handle.published and handle.published.stateSummary == 'changed'" target="published-changed" />
          <transition target="published-unavailable" />
        </state>

        <state id="published-new"/>
        <state id="published-live"/>
        <state id="published-changed"/>
        <state id="published-unavailable"/>

      </state>

      <state id="request" initial="request-init">

        <state id="request-init">
          <transition cond="handle.request and handle.request.type == 'publish'" target="request-publication" />
          <transition cond="handle.request and handle.request.type == 'depublish'" target="request-depublication" />
          <transition cond="handle.request and handle.request.type == 'scheduledpublish'" target="request-schedule-publication" />
          <transition cond="handle.request and handle.request.type == 'scheduleddepublish'" target="request-schedule-depublication" />
          <transition target="request-unavailable" />
        </state>

        <state id="request-publication"/>
        <state id="request-depublication"/>
        <state id="request-schedule-publication"/>
        <state id="request-schedule-depublication"/>
        <state id="request-unavailable"/>

      </state>

    </parallel>

  </state>

  <final id="deleted" />

</scxml>
