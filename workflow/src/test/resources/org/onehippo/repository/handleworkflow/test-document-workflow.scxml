<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Copyright 2013 Hippo B.V. (http://www.onehippo.com)

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  -->
<scxml version="1.0"
       xmlns="http://www.w3.org/2005/07/scxml"
       xmlns:hippo="http://www.onehippo.org/cms7/repository/scxml"
       initial="handle">

  <parallel id="handle">

    <state id="status">
      <onentry>
        <if cond="dm.sf.document">
          <hippo:info info="status" value="false"/>
          <hippo:action action="checkModified" value="!empty(dm.d) and !empty(dm.u)"/>
          <if cond="empty(dm.d?.holder) or dm.d.holder==dm.user">
            <!--not draft in use by other user -->
            <hippo:info info="status" value="true"/>
          </if>
        </if>
      </onentry>

      <transition event="checkModified">
        <hippo:isModified/>
        <hippo:result value="dm.info['modified']"/>
      </transition>
    </state>

    <state id="edit" initial="no-edit">

      <state id="no-edit">
        <transition target="init-edit"
                    cond="empty(dm.rr) and (dm.sf.document or dm.sf.unlock)"/>
      </state>

      <state id="init-edit">
        <onentry>
          <if cond="dm.sf.document">
            <hippo:action action="disposeEditableInstance" value="false"/>
            <hippo:action action="obtainEditableInstance" value="false"/>
            <hippo:action action="commitEditableInstance" value="false"/>
          </if>
          <if cond="dm.sf.unlock">
            <hippo:action action="unlock" value="false"/>
          </if>
        </onentry>
        <transition target="not-editable"
                    cond="!empty(dm.r) or !empty(dm.rr)"/>
        <transition target="editing"
                    cond="!empty(dm.d?.holder)"/>
        <transition target="editable"/>
      </state>

      <state id="not-editable"/>

      <state id="editing">
        <onentry>
          <if cond="dm.sf.document">
            <if cond="dm.d.holder==dm.user">
              <hippo:action action="disposeEditableInstance" value="true"/>
              <hippo:action action="obtainEditableInstance" value="true"/>
              <hippo:action action="commitEditableInstance" value="true"/>
            </if>
            <if cond="dm.d.holder!=dm.user">
              <hippo:info info="inUseBy" value="dm.d.holder"/>
            </if>
          </if>
          <if cond="dm.sf.unlock">
            <if cond="dm.d.holder==dm.user or dm.pm('hippo:admin')">
              <hippo:action action="unlock" value="true"/>
            </if>
          </if>
        </onentry>
      </state>

      <state id="editable">
        <onentry>
          <if cond="dm.sf.document">
            <hippo:action action="obtainEditableInstance" value="true"/>
          </if>
        </onentry>
      </state>

      <transition event="disposeEditableInstance" target="reset">
        <hippo:setHolder holder="null"/>
        <if cond="!empty(dm.u) and dm.u.isAvailable('preview')">
          <hippo:result value="dm.u"/>
        <elseif cond="!empty(dm.p)"/>
          <hippo:result value="dm.p"/>
        </if>
      </transition>

      <transition event="obtainEditableInstance" target="reset">
        <if cond="!empty(dm.u)">
          <hippo:copyVariant sourceState="unpublished" targetState="draft"/>
        <elseif cond="!empty(dm.p)"/>
          <hippo:copyVariant sourceState="published" targetState="draft"/>
        </if>
        <hippo:configVariant variant="dm.d" applyModified="true" setHolder="true"/>
        <hippo:result value="dm.d"/>
      </transition>

      <transition event="commitEditableInstance" target="reset">
        <hippo:setHolder holder="null"/>
        <if cond="!empty(dm.u)">
          <hippo:isModified/>
        </if>
        <if cond="empty(dm.u) or dm.info['modified']">
          <hippo:copyVariant sourceState="draft" targetState="unpublished"/>
          <hippo:configVariant variant="dm.u" versionable="true" applyModified="true" availabilities="preview"/>
          <if cond="!empty(dm.p)">
            <if cond="dm.p.isAvailable('live')">
              <hippo:configVariant variant="dm.p" availabilities="live"/>
            <else/>
              <hippo:configVariant variant="dm.p" availabilities="null"/>
            </if>
          </if>
        </if>
      </transition>

      <transition event="unlock" target="reset">
        <hippo:setHolder holder="dm.user"/>
      </transition>

    </state>

    <state id="request" initial="no-request">

      <state id="no-request">
        <transition target="init-request"
                    cond="dm.sf.request"/>
      </state>

      <state id="init-request">
        <!-- Note: transition for request-rejected MUST be evaluated before transition for requested
                   because if the subject is a rejected request only its state is to be considered
        -->
        <transition target="request-rejected"
                    cond="!empty(dm.rr)"/>
        <transition target="requested"
                    cond="!empty(dm.r)"/>
        <transition target="not-requested"/>
      </state>

      <state id="request-rejected">
        <onentry>
          <hippo:action action="acceptRequest" value="false"/>
          <hippo:action action="rejectRequest" value="false"/>
          <hippo:action action="cancelRequest" value="true"/>
        </onentry>
      </state>

      <state id="requested">
        <onentry>
          <if cond="!empty(dm.r.owner) and dm.r.owner==dm.user">
            <hippo:action action="cancelRequest" value="true"/>
          <else/>
            <hippo:action action="cancelRequest" value="false"/>
          </if>
          <if cond="dm.pm('hippo:editor')">
            <hippo:action action="acceptRequest" value="true"/>
            <if cond="!empty(dm.r.owner) and dm.r.owner==dm.user">
              <hippo:action action="rejectRequest" value="false"/>
            <else/>
              <hippo:action action="rejectRequest" value="true"/>
            </if>
          </if>
        </onentry>
      </state>

      <state id="not-requested"/>

      <transition event="acceptRequest" target="reset">
        <if cond="dm.r.type=='delete'">
          <hippo:workflowException errorExpr="'Cannot delete document when still published'"
                                   cond="!empty(dm.p) and dm.p.isAvailable('live')"/>
          <hippo:workflowException errorExpr="'Cannot delete document which is being edited'"
                                   cond="!empty(dm.d?.holder)"/>

          <hippo:deleteRequest/>
          <hippo:invokeDocumentWorkflow action="delete"
                                        subjectExpr="!empty(dm.u) ? dm.u : empty(dm.p) ? dm.p : dm.d"/>

        <elseif cond="dm.r.type=='publish' or dm.r.type=='schedpublish"/>
          <hippo:workflowException errorExpr="'Cannot publish document which is being edited'"
                                   cond="!empty(dm.d?.holder)"/>
          <hippo:workflowException errorExpr="'Cannot publish document when no changes present'"
                                   cond="!empty(dm.u) and (empty(dm.p) or dm.u.lastModified!=dm.p.lastModified or !dm.p.isAvailable('live'))" />

          <hippo:deleteRequest/>
          <if cond="dm.r.type=='publish'">
            <hippo:invokeDocumentWorkflow action="publish" subjectExpr="dm.u"/>
          <else/>
            <hippo:invokeDocumentWorkflow action="schedpublish" whenExpr="dm.r.scheduledDate" subjectExpr="dm.r.reference"/>
          </if>

        <elseif cond="dm.r.type=='depublish' or dm.r.type=='schedpublish"/>
          <hippo:workflowException errorExpr="'Cannot depublish document which is being edited'"
                                   cond="!empty(dm.d?.holder)"/>
          <hippo:workflowException errorExpr="'Cannot depublish document when not published'"
                                   cond="!empty(dm.p) and dm.p.isAvailable('live')" />

          <hippo:deleteRequest/>
          <if cond="dm.r.type='depublish'">
            <hippo:invokeDocumentWorkflow action="publish" subjectExpr="dm.p"/>
          <else/>
            <hippo:invokeDocumentWorkflow action="scheddepublish" whenExpr="dm.r.scheduledDate" subjectExpr="dm.r.reference"/>
          </if>

        <elseif cond="dm.r.type=='rejected"/>
          <hippo:workflowException errorExpr="'Request has already been rejected'"/>
        <else/>
          <hippo:workflowException errorExpr="'Unknown request type '+dm.r.type"/>
        </if>
      </transition>

    </state>

    <state id="publish" initial="no-publish">

      <state id="no-publish">
        <transition target="init-publish"
                    cond="dm.sf.document"/>
      </state>

      <state id="init-publish">
        <onentry>
          <hippo:action action="publish" value="false"/>
        </onentry>
        <transition target="publishable"
                    cond="empty(dm.d?.holder) and !empty(dm.u) and (empty(dm.p) or dm.u.lastModified!=dm.p.lastModified or !dm.p.isAvailable('live'))"/>
        <transition target="not-publishable"/>
      </state>

      <state id="not-publishable"/>

      <state id="publishable">
        <onentry>
          <if cond="(empty(dm.r) or dm.user=='system')">
            <hippo:action action="publish" value="true"/>
            <hippo:action action="requestPublish" value="true"/>
          </if>
        </onentry>
      </state>

    </state>

    <state id="depublish" initial="no-depublish">

      <state id="no-depublish">
        <transition target="init-depublish"
                    cond="dm.sf.document"/>
      </state>

      <state id="init-depublish">
        <onentry>
          <hippo:action action="depublish" value="false"/>
        </onentry>
        <transition target="depublishable"
                    cond="empty(dm.d?.holder) and !empty(dm.p) and dm.p.isAvailable('live')"/>
        <transition target="not-depublishable"/>
      </state>

      <state id="not-depublishable"/>

      <state id="depublishable">
        <onentry>
          <if cond="(empty(dm.r) or dm.user=='system') and (dm.s=='p' or dm.s=='dp')">
            <hippo:action action="depublish" value="true"/>
            <hippo:action action="requestDepublish" value="true"/>
          </if>
        </onentry>
      </state>

    </state>

    <state id="versioning" initial="no-versioning">

      <state id="no-versioning">
        <transition target="version"
                    cond="dm.sf.version"/>
      </state>

      <state id="version">
        <onentry>
<!--
          <if cond="empty(dm.v)">
-->
          <hippo:action action="version" value="true"/>
          <hippo:action action="listVersions" value="true"/>
          <hippo:action action="restoreVersion" value="true"/>
          <hippo:action action="revertVersion" value="true"/>
<!--
          <else/>
            <hippo:action action="restoreVersionTo" value="true"/>
          </if>
-->
        </onentry>
      </state>

    </state>

    <state id="terminate" initial="no-terminate">

      <state id="no-terminate">
        <transition target="terminateable"
                    cond="dm.sf.document and (empty(dm.p) or !dm.p.isAvailable('live')) and empty(dm.d?.holder) and empty(dm.r)"/>
      </state>

      <state id="terminateable">
        <onentry>
          <hippo:action action="delete" value="true"/>
          <hippo:action action="requestDelete" value="true"/>
          <if cond="dm.pm('hippo:editor')">
            <hippo:action action="move" value="true"/>
            <hippo:action action="rename" value="true"/>
          </if>
        </onentry>
      </state>

    </state>

    <state id="copy" initial="no-copy">

      <state id="no-copy">
        <transition target="copyable"
                    cond="dm.sf.document and dm.pm('hippo:editor')"/>
      </state>

      <state id="copyable">
        <onentry>
          <hippo:action action="copy" value="true"/>
        </onentry>
      </state>

    </state>

  </parallel>

  <final id="reset"/>
  <final id="terminated" />
  <final id="invalid-context" />

</scxml>
